#include <iostream>
#include <fstream>
#include <string.h>
#include <algorithm>

using namespace std;

ifstream in("1.inp");
ofstream out("diet.out");

struct _m{
    int mp=0,mf=0,ms=0,mv=0;
};

typedef struct _nutr{
    int index, cost = 0;
    struct _m m;
} nutr;

struct _optimal{
    int index[30] = {0};
    int m_sum = 0;
    int min_cost = 0;
} optimal;

struct _data{
    int index[30] = {0};
    int i = 0;
    int cost = 0;
    struct _m m;
};

int N;
nutr diet[31];

bool compare(nutr& n1, nutr& n2){
    if(n1.cost < n2.cost){
        return 1;
    }
    return 0;
}

void input_data(){
    memset(diet,0,sizeof(diet));
    in >> N;
    in >> diet[0].m.mp >> diet[0].m.mf >> diet[0].m.ms >> diet[0].m.mv;
    for(int i = 1; i <= N; ++i){
        diet[i].index = i;
        in >> diet[i].m.mp >> diet[i].m.mf >> diet[i].m.ms >> diet[i].m.mv >> diet[i].cost;
    }
    sort(diet+1,diet+N+1,compare);
}

inline bool check_min_nutr(struct _m& m){
    return m.mp >= diet[0].m.mp && m.mf > diet[0].m.mf && m.ms > diet[0].m.ms && m.mv > diet[0].m.mv;
}

void init_optimal(){
    struct _m temp_m;
    int i;
    for(i = 1; !check_min_nutr(temp_m); ++i){
        optimal.index[i-1] = diet[i].index;
        temp_m.mp += diet[i].m.mp;
        temp_m.mf += diet[i].m.mf;
        temp_m.ms += diet[i].m.ms;
        temp_m.mv += diet[i].m.mv;
        optimal.min_cost += diet[i].cost;
    }
    while(i < 31){
        if(diet[i-1].cost == diet[i].cost){
            int m_sum1 = diet[i-1].m.mp+diet[i-1].m.mf+diet[i-1].m.ms+diet[i-1].m.mv;
            int m_sum2 = diet[i].m.mp+diet[i].m.mf+diet[i].m.ms+diet[i].m.mv;
            if(m_sum1 < m_sum2){
                optimal.index[i-2] = diet[i].index;
                temp_m.mp += diet[i-1].m.mp - diet[i].m.mp;
                temp_m.mf += diet[i-1].m.mf - diet[i].m.mf;
                temp_m.ms += diet[i-1].m.ms - diet[i].m.ms;
                temp_m.mv += diet[i-1].m.ms - diet[i].m.mv;
            }
        }
        else{
            break;
        }
        ++i;
    }
    optimal.m_sum = temp_m.mp + temp_m.mf + temp_m.ms + temp_m.mv;
}

void find_optimal(struct _data pre_nutr_data, int next_index){
    if(check_min_nutr(pre_nutr_data.m)){
        if(pre_nutr_data.cost < optimal.min_cost){
            copy(pre_nutr_data.index,pre_nutr_data.index+30,optimal.index);
            optimal.min_cost = pre_nutr_data.cost;
            optimal.m_sum = pre_nutr_data.m.mp + pre_nutr_data.m.mf + pre_nutr_data.m.ms + pre_nutr_data.m.mv;
        }
        else if(pre_nutr_data.cost == optimal.min_cost){
            int temp_sum = pre_nutr_data.m.mp + pre_nutr_data.m.mf + pre_nutr_data.m.ms + pre_nutr_data.m.mv;
            if(temp_sum > optimal.m_sum){
                copy(pre_nutr_data.index,pre_nutr_data.index+30,optimal.index);\
                optimal.m_sum = temp_sum;
            }
            else if(temp_sum == optimal.m_sum){
                cout << "call" <<endl;
            }
        }
    }
    else{
        cout << "Call" <<end;
        find_optimal(pre_nutr_data,next_index+1);

        pre_nutr_data.index[pre_nutr_data.i++] = diet[next_index].index;
        pre_nutr_data.cost += diet[next_index].cost;
        pre_nutr_data.m.mp += diet[next_index].m.mp;
        pre_nutr_data.m.mf += diet[next_index].m.mf;
        pre_nutr_data.m.ms += diet[next_index].m.ms;
        pre_nutr_data.m.mv += diet[next_index].m.mv;
        find_optimal(pre_nutr_data,next_index+1);
    }
}

int main(){
    input_data();
    init_optimal();
    struct _data data;
    find_optimal(data,1);
    for(int i = 0; i <= N; ++i){
        cout << diet[i].index <<" "<< diet[i].m.mp <<" "<< diet[i].m.mf <<" "<< diet[i].m.ms <<" "<< diet[i].m.mv <<" " << diet[i].cost << endl;
    }
    for(int i = 0; i < 30; ++i)
        cout << optimal.index[i] << endl;

    return 0;
}
